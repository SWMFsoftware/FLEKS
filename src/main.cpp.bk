#include <AMReX.H>
#include <AMReX_Box.H>
#include <AMReX_IntVect.H>
#include <AMReX_Print.H>
#include <AMReX_REAL.H>

#include "Domain.h"

int main(int argc, char* argv[]) {

  amrex::Initialize(argc, argv);

  //  Domain domain;

  // domain.init();

  int nGst;

  IntVect nCell;
  int nCellBlockMax;
  int periodicity[nDim];
  IntVect domainLo;
  IntVect domainHi;
  RealBox domainRange;
  Box domainBox;

  int coord;
  Geometry geom;

  BoxArray ba;

  DistributionMapping dm;

  MultiFab E;
  // MultiFab B;

  int nSpecies;
  // Vector<MultiFab> plasma;

  nGst = 2;

  nCell[ix_] = 8;
  nCell[iy_] = 8;
  nCell[iz_] = 8;

  nCellBlockMax = 4;

  for (auto& x : periodicity)
    x = 1;

  for (int i = 0; i < nDim; i++) {
    domainLo[i] = 0;
    domainHi[i] = nCell[i] - 1;

    domainRange.setLo(i, -1);
    domainRange.setHi(i, 1);
  }

  domainBox.setSmall(domainLo);
  domainBox.setBig(domainHi);

  coord = 0; // Cartesian

  geom.define(domainBox, &domainRange, coord, periodicity);

  ba.define(domainBox);
  ba.maxSize(nCellBlockMax);

  dm.define(ba);

  {
    // EM field
    // MultiFab E;
    // E.define(ba, dm, 3, nGst); E.setVal(0.0);
    // B.define(ba, dm, 3, nGst);
  }

  // ba is BoxArray
  // dm is DistributionMapping

  //   {
  //     // Plasma
  //     nSpecies = 2;
  //     plasma.resize(nSpecies);
  //     for(auto& pl: plasma){
  //         pl.define(ba, dm, nMoments, nGst);
  //     }
  //   }


    // make BoxArray and Geometry
    BoxArray ba1;
    Geometry geom1;
    {
      int n_cell = 16;
       IntVect dom_lo(AMREX_D_DECL(       0,        0,        0));                                                                                                               
        IntVect dom_hi(AMREX_D_DECL(n_cell-1, n_cell-1, n_cell-1));                                                                                                               
        Box domain(dom_lo, dom_hi); 
      

      // Initialize the boxarray "ba" from the single box "bx"
      ba1.define(domain);
      // Break up boxarray "ba" into chunks no larger than "max_grid_size" along
      // a direction

        int max_grid_size = 8;
      ba1.maxSize(max_grid_size);

      // This defines the physical box, [-1,1] in each direction.
      RealBox real_box({ AMREX_D_DECL(-1.0, -1.0, -1.0) },
                       { AMREX_D_DECL(1.0, 1.0, 1.0) });

      // This defines a Geometry object
      Vector<int> is_periodic(AMREX_SPACEDIM, 1);
      geom1.define(domain, &real_box, CoordSys::cartesian, is_periodic.data());
    }

    // Nghost = number of ghost cells for each array
    int Nghost = 1;

    // Ncomp = number of components for each array
    int Ncomp = 1;

    // How Boxes are distrubuted among MPI processes
    DistributionMapping dm1(ba1);

    // we allocate two phi multifabs; one will store the old state, the other
    // the new.
    MultiFab phi_old(ba1, dm1, Ncomp, Nghost);


  Print() << "Domain::init finished! \n" << ba << dm;

  amrex::Finalize();
}
