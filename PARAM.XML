<commandList name="FLexible Exasclae Kinetic Simulator: PC component">

<commandgroup name="Output">
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! OUTPUT !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

<command name="SAVEPLOT">
  <parameter name="nPlotFile" type="integer" min="0" max="15" default="0" />
  <for name="iPlot" from="1" to="$nPlotFile">
    <parameter name="StringPlot" type="strings" min="4" max="5">
      <part name="plotarea" type="string" input="select" required="T">
	<option name="3D" value="3d"/>
	<option name="cut" value="cut"/>
	<option name="x=0" />
	<option name="y=0" />
	<option name="z=0" />
      </part>
      <part name="plotvar" type="string" required="T" input="select">
	<option name="Fluid variables" value="fluid" />
	<option name="Set variables"   value="var"/>
	<option name="Particles 0"     value="particles0" />
	<option name="Particles 1"     value="particles1" />
	<option name="Particles 2"     value="particles2" />
	<option name="Particles 3"     value="particles3" />
	<option name="Particles 0"     value="particlePop1" />
	<option name="Particles 1"     value="particlePop2" />
	<option name="Particles 2"     value="particlePop3" />
	<option name="Particles 3"     value="particlePop4" />
      </part>
      <part name="plotform" type="string" input="select" required="T">
	<option value="amrex" name="AMReX built-in format"/>
  <option value="hdf5" name="HDF5 format"/>
	<option value="real4" name="IDL single prec"/>
	<option value="real8" name="IDL double prec"/>
	<option value="ascii" name="IDL ascii"/>
      </part>
      <part name="plotunit" type="string" input="select" required="T">
	<option value="si"     name="SI units"/>
	<option value="planet" name="planet units"/>
	<option value="pic"    name="PIC normalized units"/>
      </part>
      <part name="maxtimeunit" type="string" input="select" required="F">
	<option value="hour"   name="hour"/>
  <option value="year"   name="year"/>
      </part>
      <part name="compactplot" type="string" input="select" required="F"
	    if="$plotform !~ /amrex/">
	<option value="compact"/>
      </part>
    </parameter>
    <parameter name="DnSavePlot" type="integer" min="-1" default="-1"/>
    <parameter name="DtSavePlot" type="real" min="-1" default="-1.0"/>
    <if expr="$plotarea =~ /\bdpl|cut|slc\b/">
      <parameter name="xMinCut" type="real" />
      <parameter name="xMaxCut" type="real" min="$xMinCut"/>
      <parameter name="yMinCut" type="real" />
      <parameter name="yMaxCut" type="real" min="$yMinCut"/>
      <parameter name="zMinCut" type="real" />
      <parameter name="zMaxCut" type="real" min="$zMinCut"/>
    </if>
    <parameter name="DxSavePlot" type="real" min="-1.0" default="-1.0" />
    <if expr="$plotvar =~ /\bvar\b/i">
      <parameter name="NameVars" type="string" length="200"/>
    </if>
  </for>
    
#SAVEPLOT
6                                 nPlot
z=0 var real4 planet year         plotString
-1                                dn
20                                dt
1                                 dx
{fluid} ppcS0                     varName
y=0 fluid real4 pic hour          plotString
-100                              dn
5                                 dt
-1                                dx
3d fluid amrex planet             plotString
-1                                dn
10                                dt
1                                 dx
3d fluid real4 planet compact     plotString
-1                                dn
10                                dt
1                                 dx
cut fluid real8 si                plotString
-1                                dn
100                               dt
5                                 xMin
10                                xMax
-2                                yMin
2                                 yMax
-2                                zMin
2                                 zMax
1                                 dx
3d particles0 amrex planet        plotString
-1                                dn
200                               dt
1                                 dx   

The first parameter is nPlotFile, which is the number of files to be saved.
Each output starts with StringPlot, which specifies the output region,
variables, file format and variable units.
The plotting frequencies are given by DnOutput and DtOutput. 

StringPlot has the format: 'domain variables format unit maxtimeunit'.

The first part 'domain' can be one of the following: 
\begin{verbatim}
x=x0     - a 2D cut of x=x0 plane. 'x0' is the coordinate. 
y=y0     - a 2D cut of y=y0 plane. 'y0' is the coordinate. 
z=z0     - a 2D cut of z=z0 plane. 'z0' is the coordinate.
3d       - the whole computational domain.
cut      - part of the 3D domain. Need to specifiy the output range.
\end{verbatim}

The value of 'variables' can be:
\begin{verbatim}
particlesN - location, velocity and weight of species N particles (N=0,1,..)
fluid      - all the fluid variables of the first two species:
             'rhoS0 rhoS1 Bx By Bz Ex Ey Ez uxS0 uyS0 uzS0 uxS1 uyS1 uzS1 pS0 pS1 pXXS0 pYYS0 pZZS0 pXYS0 pXZS0 pYZS0 pXXS1 pYYS1 pZZS1 pXYS1 pXZS1 pYZS1'
var        - read from parameter file. The available variables:
             'Bx By Bz Ex Ey Ez ppcS* rhoS* uxS* uyS* uzS* pS* pXXS* pYYS* pZZS* pXYS* pXZS* pYZS* qc divEc',
             where '*' is the number of the species. The variables 'qc' and
	     'divEc' are the net charge and the divergence of the electric field
	     at the cell center, respectively.
\end{verbatim}

The file format can be 'real4', 'real8', 'ascii' 'amrex' or 'hdf5'. The IDL formats
'real4', 'real8' and 'ascii' support the 2D/3D and 'cut' ouput domains for
the fields. But they can not save particles. The 'amrex' format supports
'3d' and 'cut' domains for saving particles, and '3d' domain for saving fields.
'hdf5' supports '3d' domain for fields, if both AMReX and FLEKS are compiled with a 
 parallel HDF5 library.
 
 Paraview's 'contour' filter does not work well for both 'amrex' and 'hdf5' files. 
 Since Paraview contour each block individually, there are cracks across the block 
 interface. This is a long standing issue of Paraview
(https://public.kitware.com/pipermail/paraview/2013-October/029492.html 
https://discourse.paraview.org/t/amrex-output-contour-plot/4723), and it looks like
Paraview developers will not fix it. So a compromised solution is to convert the files 
to vtm (Paraview) with the scripts in FLEKS/tools. 

The 'unit' can be:
\begin{verbatim}
pic    - normalized CGS units
si     - SI units
planet - planetary unit. (nT, micro-volt/m, km/s, planet radius, amu/cm^3, nPa)
\end{verbatim}

The 'maxtimeunit' determines the largest time unit of of the 8-digit file
name. The default is 'hour', and 'year' is also available.
\begin{verbatim}
hour   - HHHHMMSS
year   - YYYY0DDD (DDD is the day of the year)
\end{verbatim}

No plot file is saved by default.

The idl format files can be visualized by SWMF IDL scripts. The amrex format
files can be visualized with Paraview, Visit or yt. Paraview is probably the 
most user-friendly choice. However, Paraview does not support AMR data well
so far (https://gitlab.kitware.com/paraview/paraview/-/issues/20074). To avoid
these issues, amrex format files can be converted to either Tecplot ascii (.dat) 
or vtk files with the scripts (amrex2tec.sh and amrex2vtk.sh) in FLEKS/tools.
</command>

<command name="MONITOR"
	 alias="MONITOR_FLEKS0,MONITOR_FLEKS1,MONITOR_FLEKS2"
	 multiple="T">
  <parameter name="dnReport" type="integer" default="10"/>
#MONITOR 
10                 dnReport

This command controls the frequency of printing simulation information, 
such as the GMRES convergence history, to STDOUT. The default frequency
is every 10 steps. 
</command>

<command name="SAVELOG"
	 alias="SAVELOG_FLEKS0,SAVELOG_FLEKS1,SAVELOG_FLEKS2"
	 multiple="T">
  <parameter name="dnSavePic" type="integer" default="10"/>
  <parameter name="dnSavePT" type="integer" default="10"/>

#SAVELOG
1                          dnSavePic
5                          dnSavePT

The frequencies of saving log information for the PIC and 
particle tracker components, respectively. 

</command>

<command name="TPSAVE"
	 alias="TPSAVE_FLEKS0,TPSAVE_FLEKS1,TPSAVE_FLEKS2"
	 multiple="T">
  <parameter name="unit" type="string" input="select">
    <option value="si"     name="SI units"/>
    <option value="planet" name="planet units" default="T"/>
    <option value="pic"    name="PIC normalized units"/>
  </parameter>
  <parameter name="dnSave" type="integer" default="1"/>

#TPSAVE
planet                     unit
10                         dnSave

The unit and frequence of saving test particles.

</command>

<command name="NOUTFILE"
	 alias="NOUTFILE_FLEKS0,NOUTFILE_FLEKS1,NOUTFILE_FLEKS2"
	 multiple="T">
  <parameter name="nFileField" type="integer" default="64"/>
  <parameter name="nFileParticle" type="integer" default="256"/>
  

#NOUTFILE
64                  nFileField
256                 nFileParticle

Number of files per AMREX format field or particle output. 

</command>

</commandgroup>

<commandgroup name="Scheme">
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! SCHEME !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

<command name="PIC"
	 alias="PIC_FLEKS0,PIC_FLEKS1,PIC_FLEKS2"
	 multiple="T">
  <parameter name="usePIC" type="logical" default="T"/>

#PIC
T                   usePIC

Turning on/off the PIC module. 
</command>

<command name="PARTICLETRACKER"
	 alias="PARTICLETRACKER_FLEKS0,PARTICLETRACKER_FLEKS1,PARTICLETRACKER_FLEKS2"
	 multiple="T">
  <parameter name="useParticleTracker" type="logical" default="F"/>

#PARTICLETRACKER
T                   useParticleTracker 

Turning on/off the test particle module. 
</command>

<command name="TIMESTEPPING"
	 alias="TIMESTEPPING_FLEKS0,TIMESTEPPING_FLEKS1,TIMESTEP,TIMESTEP_FLEKS2,TIMESTEP_FLEKS0,TIMESTEP_FLEKS1,TIMESTEP_FLEKS2"
	 multiple="T">
  <parameter name="useFixedDt" type="logical" default="F"/>
  <parameter name="dt" type="real" if="$useFixedDt"/>
  <parameter name="cfl" type="real" default="0.2" if="not $useFixedDt"/>

#TIMESTEPPING
F                  useFixedDt
0.1                cfl (if useFixedDt is false)

#TIMESTEPPING_FLEKS1
T                  useFixedDt
0.01               dt  (if useFixedDt is true)

Setting the CFL or fixed time step. The typical CFL number is 0.1~0.4.
</command>

<command name="PARTICLESTAGGERING"
	 alias="PARTICLESTAGGERING_FLEKS0,PARTICLESTAGGERING_FLEKS1,PARTICLESTAGGERING_FLEKS2"
	 multiple="T">
  <parameter name="isStaggered" type="logical" default="T"/>

#PARTICLESTAGGERING
T                   isStaggered  

If isStaggered is true, the primitive particle locations are at $t_{n+1/2}$,
otherwise, both locations and velocities are at $t_n$. 
</command>

<command name="RANDOMPARTICLESLOCATION"
	 alias="RANDOMPARTICLESLOCATION_FLEKS0,RANDOMPARTICLESLOCATION_FLEKS1,RANDOMPARTICLESLOCATION_FLEKS2"
	 multiple="T">
  <parameter name="isParticleLocationRandom" type="logical" default="T"/>

#RANDOMPARTICLESLOCATION
T                   isParticleLocationRandom  

If isParticleLocationRandom is true then particles are initialized with 
randomaized position, otherwise particles are equally spaced.
</command>

<command name="RESAMPLING"
	 alias="RESAMPLING_FLEKS0,RESAMPLING_FLEKS1,RESAMPLING_FLEKS2" multiple="T">
  <parameter name="doReSampling" type="logical" default="T"/>
  <if expr="$doReSampling">
    <parameter name="splittingLimit" type="real" default="0.8" max="1"/>
    <parameter name="mergingLimit" type="real" default="1.5" min="1"/>
  </if>
  
#RESAMPLING
T                   doReSampling (rest is read if true)
0.8                 splittingLimit 
0.5                 mergingLimit 

Turning on/off the particle splitting and merging to control the number of
particles per cell. If the initial particle number per cell is nPart, 
splitting (merging) will be triggered once the particle numer per cell 
becomes lower (higher) than splittingLimit*nPart (mergingLimit*nPart). 

</command>

<command name="FASTMERGE"
	 alias="FASTMERGE_FLEKS0,FASTMERGE_FLEKS1,FASTMERGE_FLEKS2" multiple="T">     
  <parameter name="fastMerge" type="logical" default="F"/>   
  <parameter name="nOld" type="integer" min="6"/>
  <parameter name="nNew" type="integer" min="5"/>
  <parameter name="nTry" type="integer" min="1"/>
  <parameter name="mergeRatioMax" type="real" min="1"/>
  

#FASTMERGE
T			  fastMerge
16			nOld
10			nNew
3		  	nTry
4			  mergeRatioMax

When the 'fastMerge' feature is enabled, the merging algorithm aims 
to merge 'nOld' particles (where 'nOld' is greater than 'nNew') into 
'nNew' particles (with 'nNew' being equal to or greater than 5). 
The goal is to achieve this while ensuring the total mass, momentum, 
and energy are conserved.

To accomplish this, 'nOld - nNew' particles inside the same 6D-space 
cell are selected for merging with a Lagrange multiplier solver. 
This solver minimizes the relative change in the mass of the 'nNew' particles.

The selection process for the 'nOld - nNew' particles chosen 
for deletion is random, and they are chosen from the 'nOld' particles.
However, it's important to note that the Lagrange multiplier solver may 
fail to find a physically meaningful solution. In such cases, two conditions 
should be met:
(1). The mass of all the new particles must be positive.
(2). The change in mass of the new particles should not be excessive, 
satisfying both 'pNew/pOld .lt. mergeRatioMax' 
and 'pOld/pNew .lt. mergeRatioMax'.
If the solver fails, the code will make up to 'nTry' attempts to select 
another set of 'nOld - nNew' particles for deletion until it succeeds.

For simulations involving particle sources, it's recommended to use
 the following parameters: 'nOld = 16', 'nNew = 10', 'nTry = 3', 
 and '2 .le. mergeRatioMax .le. 4'.

</command>

<command name="VACUUM"
  alias="VACUUM_FLEKS0,VACUUM_FLEKS1,VACUUM_FLEKS2" multiple="T">
  <parameter name="vacuum" type="real" default="0.0"/>

#VACUUM
1E-5            vacuum [amu/cc]

If the mass density of a cell is below the 'vacuum' threshold, 
no macro particles are initially launched from that cell. 
The particle splitting algorithm also excludes cells with 
densities less than 'vacuum'. The unit of of 'vacuum' is 'amu/cc'.

</command>

<command name="PARTICLELEVRATIO"
	 alias="PARTICLELEVRATIO_FLEKS0,PARTICLELEVRATIO_FLEKS1,PARTICLELEVRATIO_FLEKS2" multiple="T">
  <parameter name="pLevRatio" type="real" default="1.2"/>
  
#PARTICLELEVRATIO
1.2                 pLevRatio  

For particle splitting and resampling, the base particle number per cell 
of the level iLev is set to n0*(pLevRatio**iLev), where n0 is the ppc set 
through #PARTICLES command. The goal is to maintain a larger ppc number
for the levels of higher resolution.

</command>

<command name="LOADBALANCE" alias="LOADBALANCE_FLEKS0, LOADBALANCE_FLEKS2">
  <parameter name="loadBalanceStrategy" type="string" input="select" required="T">
    <option value="particle" />
    <option value="cell"   />
  </parameter>
  <parameter name="dn" type="integer" default="-1" required="T" />
  <parameter name="dt" type="real" default="-1" required="T" />

#LOADBALANCE
particle                    loadBalanceStrategy
20                          dn 
-1.0                        dt

#LOADBALANCE
cell                        loadBalanceStrategy
-1                          dn 
8.0                         dt

Load balancing the blocks based on the work load of each cell. The work load
is measured by the particle number per cell (ppc) when loadBalanceStrategy
is 'particle', which is recommended for OH-PT simulations. If loadBalanceStrategy is 'cell', the work loads of all active cells (do not 
including cells have been refined) are assumed to be the same. 

'dn' and 'dt' control the load balancing frequency.
</command>

<command name="DISCRETIZATION" alias="DISCRETIZE">
  <parameter name="theta" type="real" default="0.51"/>
  <parameter name="ratioDivC2C" type="real" default="0.1" />

#DISCRETIZATION
0.51                        theta
0.1                         ratioDivC2C

The Theta parameter sets $\theta$ for the time centering of the electric field,
which is calculated at the time $t_{n+\theta}$. When $\theta$ 
is 0.5, the total energy is conserved if ratioDivC2C is 0. However, 
the exact energy conservation may produce artifical oscillations. 
Typical values for Theta are from 0.51 to 0.6.

The ratioDivC2C parameter is the fraction of div(E) calculated from an
extended stencil in the discretization of the Maxwell equation.
Using an extended stencil helps to suppress short-wavelength oscillations. 

Default values are shown.
</command>

<command name="EFIELDSOLVER">
  <parameter name="EFieldTol" type="real" default="1e-6"/>
  <parameter name="EFieldIter" type="integer" default="200"/>
  
#EFIELDSOLVER
1e-6                     EFieldTol
200                      EFieldIter

The tolerance and the maximum iteration number of the electric field 
GMRES solver. The default values are shown above. 
</command>

<command name="DIVE">
  <parameter name="doCorrectDivE" type="logical" default="T"/>
  <parameter name="nDivECorrection" type="integer" default="3"
	     if="$doCorrectDivE"/>
#DIVE
T                         doCorrectDivE
3                         nDivECorrection (read if doCorrectDivE=T)

Turning on/off the accurate div(E) cleaning, which corrects the particle
locations to satisfy Gauss's law: div(E) = net_charge. 
Default is true as it is required for accuracy of long simulations. The
correction repeats nDivECorrection (default is 3) times. If the divE 
cleaning is time consuming, reducing nDivECorrection to 1 may also work.
</command>

<command name="SMOOTHE"
	 alias="SMOOTHE_FLEKS0,SMOOTHE_FLEKS1,SMOOTHE_FLEKS2"
	 multiple="T">
  <parameter name="doSmoothE" type="logical" default="F"/>
  <if expr="$doSmoothE">
    <parameter name="nSmoothE" type="integer" default="1"/>
    <parameter name="coefStrongSmooth" type="real" default="0.5" max="0.5"/>
    <parameter name="coefWeakSmooth" type="real" default="0" max="0.5"/>
    <parameter name="strongSmoothMach" type="real" default="0.8" min="0"/>
    <parameter name="weakSmoothMach" type="real" default="0.7" min="0"/>
  </if>
  
#SMOOTHE
T                  doSmoothE (rest is read if true)
1                  nSmoothE 
0.5                coefStrongSmooth
0.0                coefWeakSmooth
0.8                strongSmoothMach
0.7                weakSmoothMach

#SMOOTHE_FLEKS2
F                  doSmoothE 

Turning on/off the smoothing of the electric field. It is helpful to suppress
the short-wavelength oscillations. nSmoothE is the number of times the 
smoothing is performed. The smoothing coefficient is determined by local Mach 
number:
coef = coefStrongSmooth  if Mach .ge. strongSmoothMach 
coef = coefWeakSmooth  if Mach .le. weakSmoothMach 
coef = linear_combination(coefStrongSmooth, coefWeakSmooth) 
if weakSmoothMach .lt. Mach .lt. strongSmoothMach 

The coef is proportional to the strength of the smoothing. coef = 0.5 
is the most effective and coef .lt. 0.5 may be not stable. 

The smoothing algorithm used here is the same as the 'digital filtering'.
It seems it is not uncommon to apply smoothing tens of times for challenging 
simulations (https://doi.org/10.1016/j.jcp.2011.04.003). 

However, smoothing electric field is not always helpful. It adds diffusion to 
electric field and may artifically increase reconnection rate as it was seen in 
the island merge simulations. On the other hand, it seems the smoothing may 
transform the short-wavelength oscillations into long-wavelength oscillations, 
and the long-wavelength field aligned electric field would accelerate electrons. 

</command>

<command name="TPRELATIVISTIC"
	 alias="TPRELATIVISTIC_FLEKS0,TPRELATIVISTIC_FLEKS1,TPRELATIVISTIC_FLEKS2"
	 multiple="T">
  <parameter name="isRelativistic" type="logical" default="F"/>
  
#TPRELATIVISTIC
T                         isRelativistic

If it is true, the test particle velocity update will be relativistic.
</command>

</commandgroup>

<commandgroup name="Inital and boundary conditions">
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!! INITIAL AND BOUNDARY CONDITIONS !!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!



<command name="GEOMETRY"
	 alias="GEOMETRY_FLEKS0,GEOMETRY_FLEKS1,GEOMETRY_FLEKS2" multiple="T">
  <parameter name="xMin" type="real"/>
  <parameter name="xMax" type="real"/>
  <parameter name="yMin" type="real"/>
  <parameter name="yMax" type="real"/>
  <parameter name="zMin" type="real"/>
  <parameter name="zMax" type="real"/>
	
#GEOMETRY
-1			            xMin 
1 	                xMax 
-1			            yMin 
1 	                yMax 
-1			            zMin 
1 	                zMax 

It is used to set the simulation domain size for OH-PT simulations. 
For MHD-AEPIC simulations, the domain is set from BATSRUS and 
this command should only exist in the restart file.
</command>

<command name="NCELL" alias="NCELL_FLEKS0,NCELL_FLEKS1,NCELL_FLEKS2"
	 multiple="T">
  <parameter name="nCellX" type="integer"/>
  <parameter name="nCellY" type="integer"/>
  <parameter name="nCellZ" type="integer"/>
#NCELL 
32					nCellX 
64					nCellY
48					nCellZ 

It is used to set the domain cell number for OH-PT simulations. 
For MHD-AEPIC simulations, the cell number is set from BATSRUS and 
this command should only exist in the restart file.
</command>

<command name="REGION" alias="REGION_FLEKS0,REGION_FLEKS1,REGION_FLEKS2"  
  multiple="T">
  <parameter name="regionName" type="string"/>
  <parameter name="shape" type="string" input="select" required="T">
    <option value="box"     />
    <option value="paraboloid" />
    <option value="shell"    />
    <option value="sphere"   />
  </parameter>
  <if expr="$shape =~ /paraboloid/">
    <parameter name="iAxis" type="integer" min="0" max="2"/>    
  </if>
  <if expr="$shape !~ /box/">
    <parameter name="centerX" type="real" />
    <parameter name="centerY" type="real" />
    <parameter name="centerZ" type="real" />
  </if>
  <if expr="$shape =~ /box\b/">
    <parameter name="xMinBox" type="real" />
    <parameter name="xMaxBox" type="real" />
    <parameter name="yMinBox" type="real" />
    <parameter name="yMaxBox" type="real" />
    <parameter name="zMinBox" type="real" />
    <parameter name="zMaxBox" type="real" />
  </if>
  <if expr="$shape =~ /sphere|shell/">
    <parameter name="radiusInner" type="real" min="0"
	       if="$shape =~ /shell/"/>
    <parameter name="radius"  type="real" min="0+$RadiusInner"/>
  </if>
  <if expr="$shape =~ /paraboloid/">
    <parameter name="height"     type="real" />
    <parameter name="radius1"    type="real" min="0"/>
    <parameter name="radius2"    type="real" min="0" />
  </if>  

#REGION
region1		regionName
box			  shape
-64.0			xMin
-32.0			xMax
-16.0			yMin
16.0			yMax
-16.0			zMin
  0.0			zMax

#REGION
sphere1		nameRegion
sphere  	shape
-10.0			centerX
 10.0			centerY
  0.0			centerZ
 20.0			radius

#REGION
shell1	  nameRegion
shell     shape
-10.0			centerX
 10.0			centerY
  0.0			centerZ
 20.0			radiusInner
 20.0			radiusOuter


#REGION
p1	            nameRegion
paraboloid   	  shape
0               iAxis
-10.0			      centerX
 10.0			      centerY
  0.0			      centerZ
-10             height
 20.0			      radius1
 10.0			      radius2

The regions defined here can be used for setting refinement areas. 

For a 'paraboloid', the iAxis is the axis of the paraboloid, and it can 
be 0 (x-dir), 1 (y-dir), or 2 (z-dir). Its height can be negative, which 
indicates the orientation direction. The direction of the paraboloid (iAxis)
and the directions of radius1 and radius2 form a right-hand system. If 
iAxis is the x/y/z direction, radius1 is the radius in the y/z/x direction,
and radius isin the z/x/y direction.

</command>

<command name="REFINEREGION" alias="REFINEREGION_FLEKS0,REFINEREGION_FLEKS1,
REFINEREGION_FLEKS2" multiple="T">
  <parameter name="refineLev" type="integer" min="0"/>
  <parameter name="refineArea" type="string" />

#REFINEREGION
0                         refineLev
+box1 -sphere1		        StringHallRegion

#REFINEREGION
1                         refineLev
+box2 -sphere2		        StringHallRegion

This command is used to specify the regions of refinement for the 
level refineLev. The cells inside the '+' shapes but outside the '-' 
shapes will be refined.

Multiple #REFINEREGION commands can be used for different levels.

</command>

<command name="GRIDEFFICIENCY" alias="GRIDEFFICIENCY_FLEKS0,GRIDEFFICIENCY_FLEKS1,
GRIDEFFICIENCY_FLEKS2" multiple="T">
  <parameter name="gridEfficiency" type="real" min="0" max="1" default="0.7"/>
  
#GRIDEFFICIENCY
0.7                       gridEfficiency

From AMReX online docs: "This threshold value (gridEfficiency), which defaults
to 0.7 (or 70%), is used to ensure that grids do not contain too large a fraction of un-tagged cells."

For a block, if the ratio of its cells that are labelled for refinement is 
more than 'gridEfficiency', the whole block will be refined. Since the block
decomposition may be different for the same setup but on different numbers of 
cores, these simulations may refine grids differently if 'gridEfficiency'
is not 1. 

</command>

<command name="PARTICLES"
	 alias="PARTICLES_FLEKS0,PARTICLES_FLEKS1,PARTICLES_FLEKS2"
	 multiple="T">
  <parameter name="nParticleX" type="integer" min="1" default="6"/>
  <parameter name="nParticleY" type="integer" min="1" default="6"/>
  <parameter name="nParticleZ" type="integer" min="1" default="6"/>

#PARTICLES
6                  particles per cell in X 
6                  particles per cell in Y 
6                  particles per cell in Z 

#PARTICLES_FLEKS1
10                 particles per cell in X 
10                 particles per cell in Y 
1                  particles per cell in Z 

The command sets particle numbers in each direction for initial
condition and ghost cells for a FLEKS region.
</command>

<command name="SOURCEPARTICLES"
	 alias="SOURCEPARTICLES_FLEKS0,SOURCEPARTICLES_FLEKS1,SOURCEPARTICLES_FLEKS2"
	 multiple="T">
  <parameter name="nParticleX" type="integer" min="0" default="0"/>
  <parameter name="nParticleY" type="integer" min="0" default="0"/>
  <parameter name="nParticleZ" type="integer" min="0" default="0"/>

#SOURCEPARTICLES
1                  particles per cell in X 
1                  particles per cell in Y 
1                  particles per cell in Z 

#SOURCEPARTICLES_FLEKS1
10                 particles per cell in X 
10                 particles per cell in Y 
1                  particles per cell in Z 

The command sets particle number per cell for plasma sources.
</command>

<command name="TPREGION"
	 alias="TPREGION_FLEKS0,TPREGION_FLEKS1,TPREGION_FLEKS2"
	 multiple="T">
  <parameter name="region" type="string"/>     

#TPREGION
boundary           region

#TPREGION_FLEKS0
uniform           region

Users can choose generating test particles either in the whole 
domain (uniform) or only at the boundary. 
</command>

<command name="TPSTATESI"
	 alias="TPSTATE_FLEKS0,TPSTATE_FLEKS1,TPSTATE_FLEKS2"
	 multiple="T">
  <parameter name="nState" type="integer" min="0" default="0"/>
  <parameter name="iSpecies" type="integer"/>
  <parameter name="vth" type="real"/>
  <parameter name="vx" type="real"/>
  <parameter name="vy" type="real"/>
  <parameter name="vz" type="real"/>
  

#TPSTATESI                                   
1                       nState                
1                       iSpecies             
0                       vth[m/s]
1e5                     vx[m/s]             
2e5                     vy[m/s]                   
1e6                     vz[m/s] 

Initializating test particles with user defined thermal velocity (vth) and 
bulk velocities (vx, vy and vz) for iSpecies. The velocities are in SI unit. 

</command>

<command name="TPPARTICLES"
	 alias="TPPARTICLES_FLEKS0,TPPARTICLES_FLEKS1,TPPARTICLES_FLEKS2"
	 multiple="T">
  <parameter name="nParticleX" type="integer" min="1" default="1"/>
  <parameter name="nParticleY" type="integer" min="1" default="1"/>
  <parameter name="nParticleZ" type="integer" min="1" default="1"/>

#TPPARTICLES
1                  particles per cell in X 
1                  particles per cell in Y 
1                  particles per cell in Z 

This command sets the number of test particles per cell. 

</command>

<command name="TPCELLINTERVAL"
	 alias="TPCELLINTERVAL_FLEKS0,TPCELLINTERVAL_FLEKS1,TPCELLINTERVAL_FLEKS2"
	 multiple="T">
  <parameter name="nIntervalX" type="integer" min="1" default="1"/>
  <parameter name="nIntervalY" type="integer" min="1" default="1"/>
  <parameter name="nIntervalZ" type="integer" min="1" default="1"/>

#TPCELLINTERVAL
1                  nIntervalX
1                  nIntervalY
1                  nIntervalZ

Generating test particles for every cell may be too much for some applications. 
This command allows generating test particles for every nInterval cells in the
region defined by command #TPREGION
</command>


<command name="ELECTRON"
	 alias="ELECTRON_FLEKS0,ELECTRON_FLEKS1,ELECTRON_FLEKS2"
	 multiple="T">
  <parameter name="electronChargePerMass" type="real" default="-100"/>

#ELECTRON
-100                     electronChargePerMass

#ELECTRON_FLEKS1
-100                      electronChargePerMass for FLEKS region 1

This command sets the charge per mass in normalized unit for electrons.
If the _FLEKSX is added, it only sets the value for the X FLEKS region.
It is ignored when FLEKS is coupled with BATSRUS configured with the 
five-moment or six-moment fluid closures that define the electron mass.

Default value is shown.
</command>

<command name="TESTCASE"
	 alias="TESTCASE_FLEKS0,TESTCASE_FLEKS1,TESTCASE_FLEKS2" multiple="T">
  <parameter name="testCase" type="string"/>

#TESTCASE 
TwoStream			testCase

It will set the initial conditions for a specific test case.
</command>

<command name="PERIODICITY">
  <parameter name="isPeriodicX" type="logical" default="F" />
  <parameter name="isPeriodicY" type="logical" default="F" />
  <parameter name="isPeriodicZ" type="logical" default="F" />
  
#PERIODICITY
F                 isPeriodicX
F                 isPeriodicY
F                 isPeriodicZ

We may want to use periodic boundary conditions in some directions even in
a coupled simulation, and the command above can be used. Note that if there
is only one cell in one direction, periodic boundary conditions will be used
in this direction and the parameter above will be ignored. Otherwise,
the default value is false.
</command>

<command name="MAXBLOCKSIZE" alias="MAXBLOCKSIZE_FLEKS0,MAXBLOCKSIZE_FLEKS1,MAXBLOCKSIZE_FLEKS2"
	 multiple="T">
  <parameter name="nCellX" type="integer" min="1" default="8"/>
  <parameter name="nCellY" type="integer" min="1" default="8"/>
  <parameter name="nCellZ" type="integer" min="1" default="8"/>

#MAXBLOCKSIZE
8                   nCellX
8                   nCellY
1                   nCellZ 

This command sets the largest block size that is allowed. All blocks are 
equal to or smaller than the sizes set here. Users can search 
"grid information summary" and "load balance report" to obtain the 
grid information. 

8 to 16 cells per direction usually reach a good balance between 
efficiency and flexibility. 8*8*8 or 16*8*8 are typical for a 3D simulation.
</command>


<command name="INITFROMSWMF"
	 alias="INITFROMSWMF_FLEKS0,INITFROMSWMF_FLEKS1,INITFROMSWMF_FLEKS2"
	 multiple="T">
  <parameter name="initFromSWMF" type="logical" default="T"/>

#INITFROMSWMF
T                   initFromSWMF

By default, the PIC EM fields and particles are initialized based on the 
fields received from SWMF. If initFromSWMF is set to false, PIC will be 
initialized from the #UNIFORMSTATE command.
</command>

<command name="NORMALIZATION"
	 alias="NORMALIZATION_FLEKS0,NORMALIZATION_FLEKS1,NORMALIZATION_FLEKS2"
	 multiple="T">
  <parameter name="lNorm" type="real"/>
  <parameter name="uNorm" type="real"/>

#NORMALIZATION
1.495978707E11          lNorm [m]
3.0e8                   uNorm [m/s]

If PIC is not initialized from SWMF (#INITFROMSWMF), length and speed 
normalization should be set here. Both lNorm and uNorm are in SI units.
</command>

<command name="PLASMA"
	 alias="PLASMA_FLEKS0,PLASMA_FLEKS1,PLASMA_FLEKS2"
	 multiple="T">
  <parameter name="nS" type="integer"/>
  <parameter name="mass" type="real"/>
  <parameter name="charge" type="real"/>

#PLASMA
1                       nS
1                       mass
0                       charge ! neutral particle

#PLASMA_FLEKS0
2                       nS
1                       mass
1                       charge
0.1                     mass
-1                      charge

If PIC is not initialized from SWMF (#INITFROMSWMF), set particle
mass and charge here. The units of mass and charge are amu and 
elementary charge, respectively. If the charge is 0, then it is a 
neutral species. 

</command>


<command name="UNIFORMSTATE"
	 alias="UNIFORMSTATE_FLEKS0,UNIFORMSTATE_FLEKS1,UNIFORMSTATE_FLEKS2"
	 multiple="T">
  <parameter name="rho" type="real"/>  
  <parameter name="ux" type="real"/>  
  <parameter name="uy" type="real"/>  
  <parameter name="uz" type="real"/>  
  <parameter name="T" type="real"/>  
  <parameter name="Bx" type="real"/>  
  <parameter name="By" type="real"/>  
  <parameter name="Bz" type="real"/>  
  <parameter name="Ex" type="real"/>  
  <parameter name="Ey" type="real"/>  
  <parameter name="Ez" type="real"/>  

#UNIFORMSTATE
1.8                 rho [amu/cc]  ! Species 1 
100                 ux [km/s]
0                   uy [km/s]
0                   uz [km/s]
6000                T  [K] 
0.18                rho [amu/cc]  ! Species 2 
100                 ux [km/s]
0                   uy [km/s]
0                   uz [km/s]
6000                T  [K] 
0.0                 Bx [?]
0.0                 By [?]
0.0                 Bz [?]
0.0                 Ex [?]
0.0                 Ey [?]
0.0                 Ez [?]

If PIC is not initialized from SWMF (#INITFROMSWMF), set uniform initial
conditions here. This command has only been tested with neutral particles
(OH-PT coupling) so far. The units of B and E are SI, and it is likely
they will be changed to other units in the future.
</command>

</commandgroup>

<commandgroup name="SCRIPT COMMANDS">
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!! SCRIPT COMMANDS !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
<command name="INCLUDE">
	<parameter name="NameIncludeFile" type="string" />
#INCLUDE
PC/restartIN/FLEKS0_restart.H		NameIncludeFile

Include a file. The most useful application is including the restart
header file as shown by the example. Including this file helps make sure
that the original and restarted runs use consistent settings.

The default is to use a single PARAM.in file.
</command>

</commandgroup>

<commandgroup name="Restart">
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! RESTART !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

<command name="RESTART"
	 alias="RESTART_FLEKS0,RESTART_FLEKS1,RESTART_FLEKS2"
	 multiple="T">
  <parameter name="doRestart" type="logical" default="F"/>

#RESTART 
F                 doRestart 

This command should only exist in the restart file FLEKSX_restart.H
to indicate that the FLEKS region is restarted from a file.

In PARAM.in, users should use the command #INCLUDE instead of #RESTART
to control the restart.
</command>

<command name="RECEIVEICONLY"
	 alias="RECEIVEICONLY_FLEKS0,RECEIVEICONLY_FLEKS1,RECEIVEICONLY_FLEKS2"
	 multiple="T">
  <parameter name="receiveICOnly" type="logical" default="F"/>

pass
</command>

<command name="RESTARTFIONLY"
	 alias="RESTARTFIONLY_FLEKS0,RESTARTFIONLY_FLEKS1,RESTARTFIONLY_FLEKS2"
	 multiple="T">
  <parameter name="doRestartFIOnly" type="logical" default="F"/>

#RESTARTFIONLY 
F                 doRestartFIOnly 

This command should only exist in the restart file FLEKSX_restart.H. If 
it is true, only the fluid interface restarts.
</command>

<command name="FLUIDVARNAMES"
	 alias="FLUIDVARNAMES_FLEKS0,FLUIDVARNAMES_FLEKS1,FLUIDVARNAMES_FLEKS2"
	 multiple="T">
  <parameter name="nVar" type="integer" min="0" max="100" default="0"/>
  <for from="1" to="$nVar">
    <parameter name="varName" type="string"/>
  </for>

PASS

</command>

<command name="NSTEP"
	 alias="NSTEP_FLEKS0,NSTEP_FLEKS1,NSTEP_FLEKS2"
	 multiple="T">
  <parameter name="nStep" type="integer"/>

#NSTEP
100                 nStep 

The cycle number of the restart file. 

This command should only exist in the restart file FLEKSX_restart.H
</command>

<command name="TIMESIMULATION"
	 alias="TIMESIMULATION_FLEKS0,TIMESIMULATION_FLEKS1,TIMESIMULATION_FLEKS2"
	 multiple="T">
  <parameter name="timeSimulation" type="real"/>

#TIMESIMULATION
1.3                 timeSimulation

The simulation time of the restart file. 

This command should only exist in the restart file FLEKSX_restart.H
</command>

<command name="DT"
	 alias="DT_FLEKS0,DT_FLEKS1,DT_FLEKS2" multiple="T">
  <parameter name="dtSI" type="real"/>
  <parameter name="dtNextSI" type="real"/>

#DT
0.1                 dtSI 
0.12	            dtNextSI 

The last and the next time step. 

This command should only exist in the restart file FLEKSX_restart.H
</command>

</commandgroup>

</commandList>
